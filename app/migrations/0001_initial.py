# Generated by Django 4.2.4 on 2023-09-04 18:01

import app.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="MyCustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("username", models.CharField(blank=True, max_length=30, null=True)),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("is_admin", models.BooleanField(default=False)),
                ("is_alumni", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", app.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("paragraph", models.TextField()),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="achievements/"),
                ),
                ("datetime_field", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Carousel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="carousel_images/")),
                ("quote", models.TextField()),
                ("datetime_field", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="GalleryImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("caption", models.CharField(max_length=255)),
                ("image", models.ImageField(upload_to="gallery_images/")),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("first_reunion", "First Reunion"),
                            ("home_gallery", "Home Gallery"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Notice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=500)),
                ("paragraph", models.TextField(blank=True, null=True)),
                ("file", models.FileField(blank=True, null=True, upload_to="notice/")),
                ("datetime_field", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="ReunionRegistration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                (
                    "roll_number",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999),
                        ]
                    ),
                ),
                (
                    "number_of_guests",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9),
                        ],
                    ),
                ),
                (
                    "driver",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(3),
                        ],
                    ),
                ),
                ("total_amount_paid", models.IntegerField()),
                (
                    "upload_payment_slip",
                    models.ImageField(
                        blank=True, null=True, upload_to="payment_slips/"
                    ),
                ),
                ("is_payment_varified", models.BooleanField(default=False)),
                (
                    "transaction_id",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "phone_no",
                    models.CharField(
                        blank=True,
                        max_length=18,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid international phone number.",
                                regex="^\\+?([0-9]{1,3})?[-. ]?([0-9]{1,4})[-. ]?([0-9]{1,4})[-. ]?([0-9]{1,9})$",
                            )
                        ],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "roll",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(9999999),
                        ]
                    ),
                ),
                (
                    "series",
                    models.CharField(
                        choices=[
                            ("2005", "2005"),
                            ("2006", "2006"),
                            ("2007", "2007"),
                            ("2008", "2008"),
                            ("2009", "2009"),
                            ("2010", "2010"),
                            ("2011", "2011"),
                            ("2012", "2012"),
                            ("2013", "2013"),
                            ("2014", "2014"),
                            ("2015", "2015"),
                            ("2016", "2016"),
                            ("faculty_member", "Faculty Member"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        max_length=18,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Enter a valid international phone number.",
                                regex="^\\+?([0-9]{1,3})?[-. ]?([0-9]{1,4})[-. ]?([0-9]{1,4})[-. ]?([0-9]{1,9})$",
                            )
                        ],
                    ),
                ),
                (
                    "whatsapp_no",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator("^\\d{10,15}$")
                        ],
                    ),
                ),
                ("current_position", models.CharField(max_length=100)),
                ("current_organization", models.CharField(max_length=100)),
                ("previous_experience", models.TextField(blank=True, null=True)),
                ("certificate", models.TextField(blank=True, null=True)),
                ("skills", models.TextField(blank=True, null=True)),
                ("present_address", models.TextField()),
                ("home_district", models.CharField(max_length=100)),
                (
                    "blood_group",
                    models.CharField(
                        choices=[
                            ("A+", "A+"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B-", "B-"),
                            ("O+", "O+"),
                            ("O-", "O-"),
                            ("AB+", "AB+"),
                            ("AB-", "AB-"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        blank=True,
                        choices=[("married", "Married"), ("single", "Single")],
                        max_length=7,
                        null=True,
                    ),
                ),
                ("linkedin", models.URLField(blank=True, null=True)),
                ("facebook", models.URLField(blank=True, null=True)),
                ("profile_picture", models.ImageField(upload_to="profile_pics/")),
                (
                    "membership",
                    models.CharField(
                        choices=[
                            ("not_provided", "Not Provided yet"),
                            ("alumni_member", "Alumni Member"),
                            ("faculty_member", "Faculty Member"),
                            ("honorary_member", "Honorary Member"),
                            ("life_member", "Life Member"),
                        ],
                        default="not_provided",
                        max_length=20,
                    ),
                ),
                (
                    "name_of_degree1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "institution1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "name_of_degree2",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "institution2",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "name_of_degree3",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "institution3",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]
